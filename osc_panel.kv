# panel.kv SY300 control panel for OSC, Filter/Amp, and LFOs
#: import Label kivy.uix.label
#: import CircleKnob circleknob
#: import XYKnob xyknob
#: import ADKnob adknob
#: import SwitchKnob switchknob
#: import ToggleKnob toggleknob

<OSC>
    rows: 2
    cols: 5
    #spacing: 1
    padding: 2

    canvas.after:
        Color:
            rgba:[.4, .4 , .4, .7 ]
        Line:
            width:2
            rounded_rectangle: (*self.pos,self.width,self.height, 2)

    BoxLayout:
        orientation: 'vertical'
        spacing:2
        Label:
            text: 'OSC ' + root.parent.osc_text
            color: [144/255, 228/255 , 1, 1]
        SpinnerKnob:
            id:osc_wave
            addresses: [ 0x01 ]
            on_text: app.send2midi( root.parent.osc_adr, self.addresses[0], self.values.index(self.text) )
            text: 'SAW'
            color: [144/255, 228/255 , 1, 1]
            values: ['SIN', 'SAW', 'TRI', 'SQR', 'PWM', 'DETUNE SAW', 'NOISE', 'INPUT']
        BoxLayout:

            ToggleKnob:
                text: 'RING'
                comaddresses: [ 0x01  + 2 * (root.parent.osc_text == "3") if root.parent.osc_text != "1" else 500 ]
                on_state: app.send2midi( 0x18, self.comaddresses[0], self.state == 'down' )
                color: [144/255, 228/255 , 1, 1]
                size_hint_x: .5
                opacity:  0 if root.parent.is_osc_1 is True else 1
                disabled: 1 if (root.parent.is_osc_1 or osc_wave.text in ['INPUT']) is True else 0
            SpinnerKnob:
                text: 'SYNC'
                comaddresses: [ 0x00  + 2 * (root.parent.osc_text == "3") if root.parent.osc_text != "1" else 500 ]
                on_text: app.send2midi( 0x18, self.comaddresses[0], self.values.index(self.text) )
                color: [144/255, 228/255 , 1, 1]
                values: ['Sync Off', 'Sync On', 'Sync LoFi']
                opacity:   0 if root.parent.is_osc_1 is True else 1
                disabled:  1 if (root.parent.is_osc_1 or osc_wave.text in ['DETUNE SAW', 'NOISE', 'INPUT']) is True else 0

    CircleKnob:
        id: pitch
        text: 'PITCH'
        values: [str(x) for x in range(-24, 25)]
        value: 24
        addresses: [ 0x7 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text == 'INPUT' else False
    CircleKnob:
        id: fine
        text: 'FINE'
        values: [str(x) for x in range(-50, 51)]
        value: 50
        addresses: [ 0x8 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text == 'INPUT' else False
    CircleKnob:
        id:pulse_width
        text: 'PULSE WIDTH'
        addresses: [ 0x2 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text != 'PWM'  else False
    CircleKnob:
        text: 'DETUNE'
        values: [str(x) for x in range(-50, 51)]
        value: 50
        addresses: [ 0x5 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text != 'DETUNE SAW' else False
    CircleKnob:
        text: 'SHARPNESS'
        addresses: [ 0x6 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text != 'NOISE' else False


    XYKnob:
        text:    'PWM ENV'
        crosshairs: True
        label_x: 'ATTACK'
        label_y: 'DEPTH'
        addresses: [ 0x3, 0x4 ]
        on_value_x: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value_x )
        on_value_y: app.send2midi( root.parent.osc_adr, self.addresses[1], self.value_y )
        disabled: True if osc_wave.text != 'PWM' else False
    XYKnob:
        text:    'PITCH ENV'
        crosshairs: True
        label_x: 'ATTACK'
        label_y: 'DEPTH'
        addresses: [ 0x9, 0xa ]
        on_value_x: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value_x )
        on_value_y: app.send2midi( root.parent.osc_adr, self.addresses[1], self.value_y )
        disabled: True if osc_wave.text == 'INPUT' else False
    CircleKnob:
        text: 'PBEND DEPTH'
        values: [str(x) for x in range(-24, 25)]
        value: 24
        addresses: [ 0xb ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text == 'INPUT' else False
    CircleKnob:
        text: 'PBEND CTL'
        addresses: [ 0xc ]
        #on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if osc_wave.text == 'INPUT' else False


# ------------------------------ Filter --------------------------------------------
<Filter>
    size_hint_x: 3/5
    spacing: 2
    padding: 5
    rows: 2
    cols: 3
    canvas.after:
        Color:
            rgba:[.4, .4 , .4, .7 ]
        Line:
            width:2
            rounded_rectangle: (*self.pos,self.width,self.height, 2)
    BoxLayout:
        orientation: 'vertical'
        Label:
            text:'FILTER'
            color: [144/255, 228/255 , 1, 1]
        SpinnerKnob:
            id: filter_type
            text: 'BYPASS'
            addresses: [ 0x0d ]
            on_text: app.send2midi( root.parent.osc_adr, self.addresses[0], self.values.index(self.text) )
            values: ['BYPASS', 'LPF', 'HPF', 'BPF', 'PKG']
            color: [144/255, 228/255 , 1, 1]
        SpinnerKnob:
            text: '-12 dB'
            addresses: [ 0x0e ]
            on_text: app.send2midi( root.parent.osc_adr, self.addresses[0], self.values.index(self.text) )
            color: [144/255, 228/255 , 1, 1]
            values: ['-12 dB', '-24 dB']
        Label:
            text:''
            size_hint_y: .1


    XYKnob:
        text:       'FILTER'
        label_x:    'CUTOFF'
        label_y:    'RESO'
        labeloffset: 0
        value_x:     0
        value_y:     0
        disabled: True if filter_type.text == 'BYPASS' else False
        addresses: [ 0xf, 0x10 ]
        on_value_x: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value_x )
        on_value_y: app.send2midi( root.parent.osc_adr, self.addresses[1], self.value_y )

    XYKnob:
        text:    'FILTER ENV'
        crosshairs: True
        label_x: 'ATTACK'
        label_y: 'DEPTH'
        disabled: True if filter_type.text == 'BYPASS' else False
        addresses: [ 0x11, 0x12 ]
        on_value_x: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value_x )
        on_value_y: app.send2midi( root.parent.osc_adr, self.addresses[1], self.value_y )

    ADKnob:
        addresses: [ 0x13 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value)
        disabled: True if root.parent.ids.osc.ids.osc_wave.text == 'INPUT' else False

    CircleKnob:
        text: 'LEVEL'
        values: [str(x) for x in range(0,201,2)]
        value: 50
        addresses: [ 0x14 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
    CircleKnob:
        text: 'PAN'
        values: ['L'+str(-x) for x in range(-50, 0)] + ['CTR'] + ['R'+ str(x) for x in range(1, 51)]
        value: 50
        addresses: [ 0x15 ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )

# --------------------------------------LFO ------------------------------
<LFO>
    size_hint_x: .76
    spacing: 2
    padding: 3

    rows:2
    cols:4
    canvas.after:
        Color:
            rgba:[.4, .4 , .4, .7 ]
        Line:
            width:2
            rounded_rectangle: (*self.pos,self.width,self.height, 2)
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            padding: 5
            orientation: 'vertical'
            canvas.after:
                Color:
                    rgba:[.4, .4 , .4, .7 ]
                Line:
                    width:1
                    dash_offset: 2
                    dash_length: 5
                    rounded_rectangle: (self.x + 5, self.y + 5,self.width -10, self.height * .85, 2) # *self.size

            Label:
                text: 'LFO ' + root.parent.osc_text + '/' + str(root.lfo_num + 1)
                color: [144/255, 228/255 , 1, 1]
            SwitchKnob: #LFO on or off
                addresses: [ 0x17 + 9 * root.lfo_num ]
                on_active: app.send2midi( root.parent.osc_adr, self.addresses[0], self.active )
        SpinnerKnob:
            size_hint_y: .4
            addresses: [ 0x18 + 9 * root.lfo_num ]
            on_text: app.send2midi( root.parent.osc_adr, self.addresses[0], self.values.index(self.text) )
            text: 'SIN'
            color: [144/255, 228/255 , 1, 1]
            values: ['SIN', 'SAW UP', 'SAW DOWN','TRI', 'SQR', 'RANDOM', 'S & H']

    CircleKnob:
        id: rate_knob
        text: 'RATE'
        disabled: True if rate_spinner.text != '0-100' else False
        #addresses: [ 0x19 + 9 * root.lfo_num ]
        on_value: app.send2midi( root.parent.osc_adr, 0x19 + 9 * root.lfo_num, self.value )

    BoxLayout:
        orientation: 'vertical'
        RateComboKnob:
            id: rate_spinner
            addresses: [ 0x19 + 9 * root.lfo_num ]
            on_text: app.send2midi( root.parent.osc_adr, self.addresses[0], 100+self.values.index(self.text) if self.text != '0-100' else rate_knob.value )
            text: '0-100'
            color: [144/255, 228/255 , 1, 1]
            values: ['0-100', 'Whole', 'Dotted Half', 'Triplet Whole', 'Half', 'Dotted Qtr', 'Triplet of Half', 'Qtr', 'Dotted 8th', 'Triplet of Qtr', '8th', 'Dotted 16th','Triplet of 8th', '16th', 'Dotted 32th', 'Triplet of 16th', '32th']
        Label:
            text:''
        ToggleKnob:
            id: dyn_depth
            addresses: [ 0x1E + 9 * root.lfo_num ]
            on_state: app.send2midi( root.parent.osc_adr, self.addresses[0], self.state == 'down' )
            text: 'DYN DEPTH'
            color: [144/255, 228/255 , 1, 1]
    CircleKnob:
        text: 'FADE TIME'
        addresses: [ 0x1f + 9 * root.lfo_num ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: dyn_depth.state == 'normal'
    CircleKnob:
        text: 'PTCH DPTH'
        addresses: [ 0x1a + 9 * root.lfo_num ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if root.parent.ids.osc.ids.osc_wave.text == 'INPUT' else False
        #on_value: app.send2midi( root.osc_adr, self.addresses[0], self.value )
    CircleKnob:
        text: 'FLTR DPTH'
        addresses: [ 0x1b + 9 * root.lfo_num  ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
    CircleKnob:
        text: 'AMP DPTH'
        addresses: [ 0x1c + 9 * root.lfo_num ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
    CircleKnob:
        text: 'PWM DPTH'
        addresses: [ 0x1d + 9 * root.lfo_num ]
        on_value: app.send2midi( root.parent.osc_adr, self.addresses[0], self.value )
        disabled: True if root.parent.ids.osc.ids.osc_wave.text != 'PWM' else False

#------------END LFO DEFINITION

# ----------------------------------------The OSC Strip ------------------------
<OSCStrip>: # Derived from BoxLayout
    SwitchKnob:
        width: 25
        size_hint_x: None
        id:osc_sw
        addresses: [ 0x0 ]
        on_active: app.send2midi( self.parent.osc_adr, self.addresses[0], self.active )
        canvas.before:
            PushMatrix
            Rotate
                angle: 90
                origin: self.center
        canvas.after:
            PopMatrix

    OSC:
        id:osc
    Filter:
    LFO:
        lfo_num: 0
    LFO:
        lfo_num: 1
#------------------------------ Control Panel using OSCStrip
BoxLayout:
    spacing: 10
    padding: [2,5,5,5]
    orientation:'vertical'
    OSCStrip:
        is_osc_1: True
        spacing: 5
        osc_text: '1'
        osc_adr: 0x20
    OSCStrip:
        spacing: 5
        osc_text: '2'
        osc_adr: 0x28
    OSCStrip:
        spacing: 5
        osc_text: '3'
        osc_adr: 0x30

<NoSY300Connected>
    title:'SY300 NOT CONNECTED'
    auto_dismiss: False
    size_hint: (None, None)
    size: (400, 400)
    BoxLayout:
        orientation:'vertical'
        Label:
            text:'Connect the SY300 and Restart the Program'
        Button:
            text: 'Quit'
            size_hint_y: .25
            on_release: app.close_it()


